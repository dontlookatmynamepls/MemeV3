local player = game.Players.LocalPlayer

if player.Name == "RianSadBoi" or player.Name == "hoajldh456" or player.Name == "KitsunPNG" or player.Name == "hoang_huy1k9" or player.Name == "thaylam5A1" then
    print("buy script")
else
    player:Kick("not verify!,discord:nhm_roblox")
end

local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

local Window = Luna:CreateWindow({
	Name = "Flandre Hub", -- This Is Title Of Your Window
	Subtitle = "Meme Adventure", -- A Gray Subtitle next To the main title.
	LogoID = "82795327169782", -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = true, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "Welcome To Flandre Hub", -- Header for loading screen
	LoadingSubtitle = "Best Meme Adventure Script", -- Subtitle for loading screen

	ConfigSettings = {
		RootFolder = nil, -- The Root Folder Is Only If You Have A Hub With Multiple Game Scripts and u may remove it. DO NOT ADD A SLASH
		ConfigFolder = "Big Hub" -- The Name Of The Folder Where Luna Will Store Configs For This Script. DO NOT ADD A SLASH
	},

	KeySystem = false, -- As Of Beta 6, Luna Has officially Implemented A Key System!
	KeySettings = {
		Title = "Luna Example Key",
		Subtitle = "Key System",
		Note = "Best Key System Ever! Also, Please Use A HWID Keysystem like Pelican, Luarmor etc. that provide key strings based on your HWID since putting a simple string is very easy to bypass",
		SaveInRoot = false, -- Enabling will save the key in your RootFolder (YOU MUST HAVE ONE BEFORE ENABLING THIS OPTION)
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		Key = {"Example Key"}, -- List of keys that will be accepted by the system, please use a system like Pelican or Luarmor that provide key strings based on your HWID since putting a simple string is very easy to bypass
		SecondAction = {
			Enabled = true, -- Set to false if you do not want a second action,
			Type = "Link", -- Link / Discord.
			Parameter = "" -- If Type is Discord, then put your invite link (DO NOT PUT DISCORD.GG/). Else, put the full link of your key system here.
		}
	}
})

Luna:Notification({ 
	Title = "54hz Is Happy TodayüëΩ",
	Icon = "notifications_active",
	ImageSource = "Material",
	Content = "thank for use my script,pls dont dead"
})

local Tab = Window:CreateTab({
	Name = "Updates",
	Icon = "list",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

Tab:CreateSection("Flandre Hub Update V4.6")

local Label = Tab:CreateLabel({
	Text = "+ Fixed Teleport Wrong Location",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "+ Fixed Visual Tab",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "+ Added Equip All Helmet And Armor(REALL)",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

Tab:CreateSection("Flandre Hub Update V4.55")

local Label = Tab:CreateLabel({
	Text = "New Ui Library(Luna)",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "+ Added Visual Tab",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

Tab:CreateSection("Flandre Hub Update V4.5")

local Label = Tab:CreateLabel({
	Text = "+ Added Spam Cursed Monster",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = " + Added Auto Pray",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "Auto Fishing Fixed",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

Tab:CreateSection("Flandre Hub Update V4.4")

local Label = Tab:CreateLabel({
	Text = "Auto Pray Added Soon...",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "Added Spam Mahogara",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "Auto Fishing Remove Because Bug",
	Style = 3 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Tab = Window:CreateTab({
	Name = "Universal Script",
	Icon = "code",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Button = Tab:CreateButton({
	Name = "Infinite Yield",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Nameless Admin",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Fly V3",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/huynhthingocmai/FlyV3/refs/heads/main/Moonsecv3"))()
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Key Broad",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Xxtan31/Ata/main/deltakeyboardcrack.txt", true))()
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Player Teleport",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/Infinity2346/Tect-Menu/main/Teleport%20Gui.lua'))()
         -- The function that takes place when the button is pressed
    	end
})

local Tab = Window:CreateTab({
	Name = "Main",
	Icon = "house",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

Tab:CreateSection("Normal Features")

local Toggle = Tab:CreateToggle({
	Name = "Kill Aura",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().G = Value
getgenv().Creator = 'https://discord.gg/B3HqPPzFYr - HalloweenGaster'

spawn(function()
    while getgenv().G and getgenv().Creator == 'https://discord.gg/B3HqPPzFYr - HalloweenGaster' do
        wait(1)
        sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", 112412400000)
        sethiddenproperty(game.Players.LocalPlayer, "MaxSimulationRadius", 112412400000)
        
        for _, d in pairs(game.Workspace:GetDescendants()) do
            if d:IsA("Humanoid") then
                local plr = game.Players:GetPlayerFromCharacter(d.Parent)
                if not plr then  -- N·∫øu kh√¥ng ph·∫£i nh√¢n v·∫≠t c·ªßa ng∆∞·ªùi ch∆°i th√¨ √°p d·ª•ng kill aura
                    d.Health = 0
                end
            end
        end
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Button = Tab:CreateButton({
	Name = "Equip All Helmet(idk)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
while wait() do
    local remote = game:GetService("ReplicatedStorage").OtherThing.Tools

    if remote and remote.FireServer then
        remote:FireServer("Giant Cursed Spirit Orb", "Armor")
        remote:FireServer("Magma Doge Head", "Armor")
        remote:FireServer("Golden Bozoi Head", "Armor")
        remote:FireServer("Big Floppa Head", "Armor")
        remote:FireServer("Void Head", "Armor")
        remote:FireServer("Skull Bike", "Armor")
        remote:FireServer("Walter Hat", "Armor")
        remote:FireServer("The World Head", "Armor")
        remote:FireServer("Walter Dog Head", "Armor")
        remote:FireServer("Giant Shivering Head", "Armor")
        remote:FireServer("Dark Maxwell Head", "Armor")
        remote:FireServer("Fraudkuna Head", "Armor")
        remote:FireServer("Nerd Head", "Armor")
        remote:FireServer("Blindfold", "Armor")
        remote:FireServer("Legendary Cat Lord Armor", "Armor")
        remote:FireServer("Legendary Cat Lord Armor", "Helmet")
        remote:FireServer("Legendary Cat Lord Armor", "Helmet")
        remote:FireServer("Legendary Cat Lord Armor", "Helmet")
    else
        warn("Kh√¥ng t√¨m th·∫•y RemoteEvent ho·∫∑c FireServer kh√¥ng t·ªìn t·∫°i!")
    end
end
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "All Helmet(1)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local invData = player:WaitForChild("InvData")

-- C√°c t·ª´ kh√≥a c·∫ßn ki·ªÉm tra trong t√™n
local allowedKeywords = { "Helmet", "Head", "Orb" }

for _, item in pairs(invData:GetChildren()) do
    if item:IsA("IntValue") then
        for _, keyword in ipairs(allowedKeywords) do
            if string.find(item.Name, keyword) then
                -- G·ª≠i t√™n item v√† lo·∫°i Armor
                ReplicatedStorage.OtherThing.Tools:FireServer(item.Name, "Armor")
                break -- Tho√°t kh·ªèi v√≤ng l·∫∑p t·ª´ kh√≥a n·∫øu ƒë√£ kh·ªõp
            end
        end
    end
end

         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "All Armor(1)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local invData = player:WaitForChild("InvData")

for _, item in pairs(invData:GetChildren()) do
    if item:IsA("IntValue") then
        local name = item.Name

        -- Ki·ªÉm tra n·∫øu t√™n ch·ª©a "Shirt" ho·∫∑c "Armor"
        local containsKeyword = string.find(name, "Shirt") or string.find(name, "Armor")
        
        -- Ki·ªÉm tra n·∫øu t√™n k·∫øt th√∫c b·∫±ng "Helmet"
        local endsWithHelmet = name:sub(-6) == "Helmet"

        if containsKeyword or endsWithHelmet then
            ReplicatedStorage.OtherThing.Tools:FireServer(name, "Helmet")
        end
    end
end

         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "All Helmet(inf)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local invData = player:WaitForChild("InvData")

    -- C√°c t·ª´ kh√≥a c·∫ßn ki·ªÉm tra trong t√™n
    local allowedKeywords = { "Helmet", "Head", "Orb" }

    while true do
        for _, item in pairs(invData:GetChildren()) do
            if item:IsA("IntValue") then
                for _, keyword in ipairs(allowedKeywords) do
                    if string.find(item.Name, keyword) then
                        -- G·ª≠i t√™n item v√† lo·∫°i Armor
                        ReplicatedStorage.OtherThing.Tools:FireServer(item.Name, "Armor")
                        break -- Tho√°t kh·ªèi v√≤ng l·∫∑p t·ª´ kh√≥a n·∫øu ƒë√£ kh·ªõp
                    end
                end
            end
        end
        task.wait() -- Gi·ªØ cooldown 0 gi√¢y gi·ªØa c√°c l·∫ßn l·∫∑p
    end
end)
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "All Armor(inf)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local invData = player:WaitForChild("InvData")

    while true do
        for _, item in pairs(invData:GetChildren()) do
            if item:IsA("IntValue") then
                local name = item.Name

                -- Ki·ªÉm tra n·∫øu t√™n ch·ª©a "Shirt" ho·∫∑c "Armor"
                local containsKeyword = string.find(name, "Shirt") or string.find(name, "Armor")
                
                -- Ki·ªÉm tra n·∫øu t√™n k·∫øt th√∫c b·∫±ng "Helmet"
                local endsWithHelmet = name:sub(-6) == "Helmet"

                if containsKeyword or endsWithHelmet then
                    ReplicatedStorage.OtherThing.Tools:FireServer(name, "Helmet")
                end
            end
        end
        task.wait() -- Gi·ªØ cooldown 0 gi√¢y gi·ªØa c√°c l·∫ßn l·∫∑p
    end
end)
         -- The function that takes place when the button is pressed
    	end
})

Tab:CreateSection("Auto Freatures")

local Label = Tab:CreateLabel({
	Text = "All Fishing Zone Need Fishing Rod And Lv 200",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local function startFishing(fishType, stateVar)
    getgenv()[stateVar] = not getgenv()[stateVar]

    if getgenv()[stateVar] then
        spawn(function()
            while getgenv()[stateVar] do
                local player = game.Players.LocalPlayer
                local fishingEvent = player and workspace:FindFirstChild(player.Name) 
                    and workspace[player.Name]:FindFirstChild("Fishing") 
                    and workspace[player.Name].Fishing:FindFirstChild(fishType) 
                    and workspace[player.Name].Fishing[fishType]:FindFirstChild("RemoteEvent")

                if fishingEvent then
                    fishingEvent:FireServer("Fishing3")
                else
                    warn("Kh√¥ng t√¨m th·∫•y RemoteEvent:", fishType)
                end
                wait(1) -- ƒê·ªÉ tr√°nh spam qu√° nhanh
            end
        end)
    end
end

local Toggle = Tab:CreateToggle({
	Name = "Fishing Desert",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
startFishing("Desert", "fishingEnabled1") -- Toggle,Def,callback
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Fishing Lava",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
startFishing("Lava", "fishingEnabled2") -- Toggle,Def,callback
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Fishing Snow",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
startFishing("Snow", "fishingEnabled3") -- Toggle,Def,callback
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Button = Tab:CreateButton({
	Name = "Auto Rock Chest(Lv 700)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Danh s√°ch t·ªça ƒë·ªô ƒë·ªÉ d·ªãch chuy·ªÉn
local positions = {
    Vector3.new(2661, 16, 73),
    Vector3.new(2507, 16, -352),
    Vector3.new(2381, 16, -617),
    Vector3.new(2454, 23, -685),
    Vector3.new(2191, 16, -966),
    Vector3.new(2494, 16, -1055),
    Vector3.new(2801, 23, -243),
    Vector3.new(2909, 16, -899),
    Vector3.new(2983, 16, -1149),
    Vector3.new(3148, 16, -744),
    Vector3.new(3114, 22, -533),
    Vector3.new(3235, 16, -657),
    Vector3.new(3428, 16, -928),
    Vector3.new(4101, 16, -1202),
    Vector3.new(4029, 16, -873),
    Vector3.new(3970, 16, -776),
    Vector3.new(3788, 16, -861),
    Vector3.new(3903, 16, -379),
    Vector3.new(3670, 16, -446),
    Vector3.new(3553, 16, -439),
    Vector3.new(3908, 16, -380),
    Vector3.new(3397, 23, -88),
    Vector3.new(3711, 16, -92),
    Vector3.new(3971, 16, 85),
    Vector3.new(3650, 16, 147),
    Vector3.new(3710, 16, -93),
    Vector3.new(3774, 25, 533),
    Vector3.new(2917, 28, 498),
    Vector3.new(2497, 22, -125),
    Vector3.new(2491, 16, 107),
    Vector3.new(2231, 16, 68),
    Vector3.new(2522, 16, 197),
    Vector3.new(2282, 16, 509),
    Vector3.new(2228, 16, 486),
    Vector3.new(2746, 17, 35),
    Vector3.new(2708, 17, 73),
    Vector3.new(2747, 17, 102),
    Vector3.new(2775, 17, 72),
    Vector3.new(3322, 16, -420),
    Vector3.new(3355, 16, -441),
    Vector3.new(3331, 16, -480),
    Vector3.new(3288, 16, -453),
    Vector3.new(3070, 18, -259),
    Vector3.new(2230, 16, 70),
    Vector3.new(3053, 18, -102)
}

local delayTime = 0.1 -- Th·ªùi gian ch·ªù gi·ªØa m·ªói l·∫ßn d·ªãch chuy·ªÉn (gi√¢y)

-- H√†m t·ª± ƒë·ªông k√≠ch ho·∫°t ProximityPrompt
local function triggerPrompt()
    for _, prompt in ipairs(workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled then
            local distance = (prompt.Parent.Position - humanoidRootPart.Position).Magnitude
            if distance <= prompt.MaxActivationDistance then
                fireproximityprompt(prompt)
            end
        end
    end
end

-- D·ªãch chuy·ªÉn ng∆∞·ªùi ch∆°i v√† ki·ªÉm tra ProximityPrompt
for _, position in ipairs(positions) do
    humanoidRootPart.CFrame = CFrame.new(position)
    wait(0.1) -- ƒê·ª£i ƒë·ªÉ nh√¢n v·∫≠t ·ªïn ƒë·ªãnh
    triggerPrompt() -- Ki·ªÉm tra v√† k√≠ch ho·∫°t ProximityPrompt n·∫øu c√≥
    wait(delayTime)
end
         -- The function that takes place when the button is pressed
    	end
})

local Toggle = Tab:CreateToggle({
	Name = "Auto Pray(Lv 1200)",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().AutoPray = Value -- ƒê·ªïi th√†nh false ƒë·ªÉ t·∫Øt script

local v = game:GetService("VirtualInputManager")
local p = game:GetService("Players").LocalPlayer.PlayerGui.Pop.NotPray:FindFirstChild("Pray")
local p2 = workspace.Map.Snow:FindFirstChild("Pray")
local p3 = game.Players.LocalPlayer.Character.HumanoidRootPart
local p4 = game:GetService("Players").LocalPlayer.PlayerGui.Pop:FindFirstChild("NotPray")

local function c(btn)
    local btnPos = btn.AbsolutePosition
    local btnSize = btn.AbsoluteSize 
    local btn = btnPos + (btnSize / 1)
    v:SendMouseButtonEvent(btn.X, btn.Y - 2, 0, true, game, 0)
    v:SendMouseButtonEvent(btn.X, btn.Y - 2, 0, false, game, 0)
end

task.spawn(function()
    while wait() do
        if not getgenv().AutoPray then return end -- Ki·ªÉm tra n·∫øu AutoPray b·ªã t·∫Øt th√¨ d·ª´ng script
        
        if p2 and p3.CFrame ~= p2.CFrame and not p4.Visible then
            p3.CFrame = p2.CFrame
            wait(0.3)
            v:SendKeyEvent(true, Enum.KeyCode.G, false, game)
            wait(1.5)
            v:SendKeyEvent(false, Enum.KeyCode.G, false, game)
        end
        
        if p then
            c(p)
            wait(0.3)
        end
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Auto Cabybara(Lv 200,Secret Grass)",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().G = Value
getgenv().Creator = 'https://discord.gg/B3HqPPzFYr - HalloweenGaster'

-- Script d·ªãch chuy·ªÉn
spawn(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    
    -- Danh s√°ch 2 t·ªça ƒë·ªô c·∫ßn d·ªãch chuy·ªÉn
    local positions = {
        Vector3.new(5478.534, 1752.534, 612.849),
        Vector3.new(-412.941, 52.783, -1225.376)
    }
    local index = 1

    -- V√≤ng l·∫∑p ch·∫°y khi getgenv().G = true v√† Creator kh·ªõp
    while getgenv().G and getgenv().Creator == 'https://discord.gg/B3HqPPzFYr - HalloweenGaster' do
        if hrp then
            hrp.CFrame = CFrame.new(positions[index])
            index = index % #positions + 1 -- Lu√¢n phi√™n 2 v·ªã tr√≠
        end
        wait(1) -- D·ª´ng 1 gi√¢y gi·ªØa m·ªói l·∫ßn d·ªãch chuy·ªÉn
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Auto Mahogara(Summon Treasure Item,No Cd,Lv 1200 And Kill Aura)",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().autoEquip = Value
    local toolName = "Summon The Treasure"
    local player = game.Players.LocalPlayer

    while getgenv().autoEquip do
        -- Chuy·ªÉn qua tool "Black Flash Kick"
        game:GetService("ReplicatedStorage").OtherThing.Tools:FireServer("Malevolent Shrine", "Special")
        
        -- ƒê·ª£i 0.5 gi√¢y r·ªìi ƒë·ªïi sang "Summon The Treasure"
        task.wait(0.5)
        
        -- Chuy·ªÉn ngay l·∫≠p t·ª©c qua tool "Summon The Treasure"
        game:GetService("ReplicatedStorage").OtherThing.Tools:FireServer("Summon The Treasure", "Special")
        
        -- ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông trang b·ªã tool
        task.wait(2)
        
        -- Li√™n t·ª•c trang b·ªã tool "Summon The Treasure" n·∫øu c√≥ trong backpack
        task.spawn(function()
            while getgenv().autoEquip do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    local tool = backpack:FindFirstChild(toolName)
                    if tool and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                        player.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
                    else
                        warn("Tool not found in backpack")
                    end
                else
                    warn("Backpack not found")
                end
                task.wait(2) -- Ki·ªÉm tra v√† trang b·ªã tool m·ªói 2 gi√¢y
            end
        end)
        
        -- ƒê·ª£i 50 gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c l·∫∑p
        task.wait(50)
    end
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Spam Cursed Attack Monster(No Cd,Cursed Spirit Attack Item)",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().autoEquip = Value
    local toolName = "Cursed Spirit Attack"
    local player = game.Players.LocalPlayer

    while getgenv().autoEquip do
        -- Chuy·ªÉn qua tool "Black Flash Kick"
        game:GetService("ReplicatedStorage").OtherThing.Tools:FireServer("Malevolent Shrine", "Special")
        
        -- ƒê·ª£i 0.5 gi√¢y r·ªìi ƒë·ªïi sang "Summon The Treasure"
        task.wait(0.5)
        
        -- Chuy·ªÉn ngay l·∫≠p t·ª©c qua tool "Summon The Treasure"
        game:GetService("ReplicatedStorage").OtherThing.Tools:FireServer("Cursed Spirit Attack", "Special")
        
        -- ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông trang b·ªã tool
        task.wait(2)
        
        -- Li√™n t·ª•c trang b·ªã tool "Summon The Treasure" n·∫øu c√≥ trong backpack
        task.spawn(function()
            while getgenv().autoEquip do
                local backpack = player:FindFirstChild("Backpack")
                if backpack then
                    local tool = backpack:FindFirstChild(toolName)
                    if tool and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                        player.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
                    else
                        warn("Tool not found in backpack")
                    end
                else
                    warn("Backpack not found")
                end
                task.wait(2) -- Ki·ªÉm tra v√† trang b·ªã tool m·ªói 2 gi√¢y
            end
        end)
        
        -- ƒê·ª£i 50 gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c l·∫∑p
        task.wait(5)
    end
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

Tab:CreateSection("No Cd")

local Paragraph = Tab:CreateParagraph({
	Title = "No Cd Tut",
	Text = "Step 1: turn on no cd,Step 2: hold the item u want no cd and wait the skill done,Step 3:change the other item with same type,Step 4: change the item u want no cd again,Step 5:hold that item and go back to step 2"
})

local Toggle = Tab:CreateToggle({
	Name = "Skill 1",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().AutoUseTool1 = value -- Bi·∫øn ƒë·ªÉ b·∫≠t/t·∫Øt script

spawn(function()
    while AutoUseTool1 do
        local player = game.Players.LocalPlayer
        local char = player.Character

        if char and char:FindFirstChildOfClass("Tool") then
            local tool = char:FindFirstChildOfClass("Tool")
            if tool:FindFirstChild("1") and tool["1"]:FindFirstChild("RemoteEvent") then
                tool["1"].RemoteEvent:FireServer()
            end
        end

        wait(0.1) -- Gi·∫£m th·ªùi gian ch·ªù n·∫øu mu·ªën t·ªëc ƒë·ªô k√≠ch ho·∫°t nhanh h∆°n
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Skill 2",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().AutoUseTool2 = value -- Bi·∫øn ƒë·ªÉ b·∫≠t/t·∫Øt script

spawn(function()
    while AutoUseTool2 do
        local player = game.Players.LocalPlayer
        local char = player.Character

        if char and char:FindFirstChildOfClass("Tool") then
            local tool = char:FindFirstChildOfClass("Tool")
            if tool:FindFirstChild("2") and tool["2"]:FindFirstChild("RemoteEvent") then
                tool["2"].RemoteEvent:FireServer()
            end
        end

        wait(0.1) -- Gi·∫£m th·ªùi gian ch·ªù n·∫øu mu·ªën t·ªëc ƒë·ªô k√≠ch ho·∫°t nhanh h∆°n
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Skill 3",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().AutoUseTool3 = value -- Bi·∫øn ƒë·ªÉ b·∫≠t/t·∫Øt script

spawn(function()
    while AutoUseTool3 do
        local player = game.Players.LocalPlayer
        local char = player.Character

        if char and char:FindFirstChildOfClass("Tool") then
            local tool = char:FindFirstChildOfClass("Tool")
            if tool:FindFirstChild("3") and tool["3"]:FindFirstChild("RemoteEvent") then
                tool["3"].RemoteEvent:FireServer()
            end
        end

        wait(0.1) -- Gi·∫£m th·ªùi gian ch·ªù n·∫øu mu·ªën t·ªëc ƒë·ªô k√≠ch ho·∫°t nhanh h∆°n
    end
end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Tab = Window:CreateTab({
	Name = "Misc",
	Icon = "check_box_outline_blank",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Button = Tab:CreateButton({
	Name = "GrabTools(Teleport)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Ph·∫ßn trung t√¢m c·ªßa nh√¢n v·∫≠t

-- Ki·ªÉm tra xem m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ nh·∫∑t kh√¥ng (c√≥ Handle kh√¥ng)
local function isPickupable(item)
    return item:FindFirstChild("Handle") and item:IsA("Tool")
end

-- L·∫∑p qua t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng trong Workspace
for _, item in pairs(workspace:GetChildren()) do
    if isPickupable(item) then
        -- D·ªãch chuy·ªÉn nh√¢n v·∫≠t ƒë·∫øn v·ªã tr√≠ c·ªßa item
        humanoidRootPart.CFrame = item.Handle.CFrame
        break -- Ch·ªâ d·ªãch chuy·ªÉn ƒë·∫øn m·ªôt v·∫≠t ph·∫©m ƒë·∫ßu ti√™n t√¨m th·∫•y
    end
end
         -- The function that takes place when the button is pressed
    	end
})

local Toggle = Tab:CreateToggle({
	Name = "GrabTools(Auto)",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().autograb = Value
 spawn(function() 
 while autograb==true do wait() 
 if not getgenv().autograb then break end 
 local humanoid = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") 
 for _, child in ipairs(workspace:GetChildren()) do 
 if game.Players.LocalPlayer.Character and child:IsA("BackpackItem") and child:FindFirstChild("Handle") then 
 humanoid:EquipTool(child) 
 end 
 end 
 end 
 end)  
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Button = Tab:CreateButton({
	Name = "idk what but buff speed",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
-- LocalScript, ƒë·∫∑t trong StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("HumanoidRootPart")

-- Th·ªùi gian gi·ªØa m·ªói l·∫ßn ki·ªÉm tra chuy·ªÉn ƒë·ªông
local CHECK_INTERVAL = 0.05
-- Kho·∫£ng c√°ch d·ªãch chuy·ªÉn m·ªói b∆∞·ªõc
local TELEPORT_DISTANCE = 1

local lastPosition = humanoid.Position

RunService.Heartbeat:Connect(function()
	local currentPosition = humanoid.Position
	local moveDirection = (currentPosition - lastPosition)
	
	if moveDirection.Magnitude > 0.01 then
		local moveVector = moveDirection.Unit * TELEPORT_DISTANCE
		humanoid.CFrame = humanoid.CFrame + moveVector
	end
	
	lastPosition = humanoid.Position
	task.wait(CHECK_INTERVAL)
end)

         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Instant Proximity",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local function updatePrompt(prompt)
    if prompt:IsA("ProximityPrompt") then
        prompt.HoldDuration = 0
    end
end

-- C·∫≠p nh·∫≠t t·∫•t c·∫£ Prompt hi·ªán c√≥
for _, obj in pairs(game:GetDescendants()) do
    updatePrompt(obj)
end

-- Khi c√≥ Prompt m·ªõi xu·∫•t hi·ªán, t·ª± ƒë·ªông ch·ªânh
game.DescendantAdded:Connect(updatePrompt)

-- C·ª© m·ªói 1 ph√∫t ki·ªÉm tra l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã b·ªè s√≥t
task.spawn(function()
    while true do
        for _, obj in pairs(game:GetDescendants()) do
            updatePrompt(obj)
        end
        print("ƒê√£ c·∫≠p nh·∫≠t t·∫•t c·∫£ ProximityPrompt!")
        task.wait(60)
    end
end)
         -- The function that takes place when the button is pressed
    	end
})

local Toggle = Tab:CreateToggle({
	Name = "Auto Proximity",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().AutoProximity = Value

    spawn(function()
        while getgenv().AutoProximity do
            local prompt = nil
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if character and character.PrimaryPart then
                    local shortestDistance = math.huge
                    for _, p in pairs(workspace:GetDescendants()) do
                        if p:IsA("ProximityPrompt") and p.Enabled then
                            local distance = (character.PrimaryPart.Position - p.Parent.Position).Magnitude
                            if distance < shortestDistance then
                                prompt = p
                                shortestDistance = distance
                            end
                        end
                    end
                end
            end)

            if prompt then
                fireproximityprompt(prompt)
            end
            wait(0.1)
        end
    end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Button = Tab:CreateButton({
	Name = "Inf Jump",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
getgenv().infi = Value
 local Player = game.Players.LocalPlayer 
 if infi ~= inf then 
 inf = game.UserInputService.JumpRequest:Connect(function() 
 if infi == false then inf:Disconnect() end 
     Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) 
 wait() 
 end) 
 end 
         -- The function that takes place when the button is pressed
    	end
})

local Toggle = Tab:CreateToggle({
	Name = "Noclip",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().Clip = Value 
 wait(0.1) 
 local function NoclipLoop() 
 if Clip == true and game.Players.LocalPlayer.Character ~= nil then 
 for _, c in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do 
                                 if c:IsA("BasePart") and c.CanCollide == true and c.Name ~= floatName then 
 c.CanCollide = false 
 end 
 end 
 end 
 end 
 Noclipping = game:GetService("RunService").Stepped:Connect(NoclipLoop) 

 if not getgenv().Clip then Noclipping:Disconnect() end
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Toggle = Tab:CreateToggle({
	Name = "Esp",
	Description = nil,
	CurrentValue = false,
    	Callback = function(Value)
getgenv().FlaggingESP = Value

    local function ApplyESP(v)
        if v.Character and v.Character:FindFirstChildOfClass('Humanoid') then
            v.Character.Humanoid.NameDisplayDistance = getgenv().FlaggingESP and 9e9 or 50
            v.Character.Humanoid.NameOcclusion = getgenv().FlaggingESP and "NoOcclusion" or "OccludeAll"
            v.Character.Humanoid.HealthDisplayDistance = getgenv().FlaggingESP and 9e9 or 50
            v.Character.Humanoid.HealthDisplayType = getgenv().FlaggingESP and "AlwaysOn" or "Never"
            v.Character.Humanoid.Health = v.Character.Humanoid.Health
        end
    end

    for i, v in pairs(game.Players:GetPlayers()) do
        ApplyESP(v)
    end

    game.Players.PlayerAdded:Connect(function(v)
        ApplyESP(v)
        v.CharacterAdded:Connect(function()
            task.wait(0.33)
            ApplyESP(v)
        end)
    end)
       	 -- The function that takes place when the toggle is switched
       	 -- The variable (Value) is a boolean on whether the toggle is true or false
    	end
}, "Toggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Tab = Window:CreateTab({
	Name = "Visual",
	Icon = "info",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Input = Tab:CreateInput({
	Name = "Fake Beli",
	Description = nil,
	PlaceholderText = "number",
	CurrentValue = "Text", -- the current text
	Numeric = true, -- When true, the user may only type numbers in the box (Example walkspeed)
	MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
	Enter = false, -- When true, the callback will only be executed when the user presses enter.
    	Callback = function(Text)
local player = game.Players.LocalPlayer
player.Stats.Beli.Value = Text

       	 -- The function that takes place when the input is changed
	 -- The variable (Text) is a string for the value in the text box
    	end
}, "Input") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Input = Tab:CreateInput({
	Name = "Fake EXP",
	Description = nil,
	PlaceholderText = "number",
	CurrentValue = "Text", -- the current text
	Numeric = true, -- When true, the user may only type numbers in the box (Example walkspeed)
	MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
	Enter = false, -- When true, the callback will only be executed when the user presses enter.
    	Callback = function(Text)
local player = game.Players.LocalPlayer
player.Stats.Exp.Value = Text

       	 -- The function that takes place when the input is changed
	 -- The variable (Text) is a string for the value in the text box
    	end
}, "Input") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Input = Tab:CreateInput({
	Name = "Fake Level",
	Description = nil,
	PlaceholderText = "number",
	CurrentValue = "Text", -- the current text
	Numeric = true, -- When true, the user may only type numbers in the box (Example walkspeed)
	MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
	Enter = false, -- When true, the callback will only be executed when the user presses enter.
    	Callback = function(Text)
local player = game.Players.LocalPlayer
player.Stats.Level.Value = Text

       	 -- The function that takes place when the input is changed
	 -- The variable (Text) is a string for the value in the text box
    	end
}, "Input") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Input = Tab:CreateInput({
	Name = "Fake Skill Point",
	Description = nil,
	PlaceholderText = "number",
	CurrentValue = "Text", -- the current text
	Numeric = true, -- When true, the user may only type numbers in the box (Example walkspeed)
	MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
	Enter = false, -- When true, the callback will only be executed when the user presses enter.
    	Callback = function(Text)
local player = game.Players.LocalPlayer
player.Stats.SkillPoint.Value = Text

       	 -- The function that takes place when the input is changed
	 -- The variable (Text) is a string for the value in the text box
    	end
}, "Input") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local Tab = Window:CreateTab({
	Name = "Teleport",
	Icon = "login",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

Tab:CreateSection("Island")

local Button = Tab:CreateButton({
	Name = "Chad",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local targetPosition = Vector3.new(-709, 10, 509)
    character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Big Brain",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local targetPosition = Vector3.new(556, 10, 506)
    character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Desert",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local targetPosition = Vector3.new(-340.91278076171875, 18.29494857788086, -997.4833374023438)
    character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Magma",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local targetPosition = Vector3.new(2801.695556640625, 11.266153335571289, -180.07965087890625)
    character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Snow",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- T·ªça ƒë·ªô ƒë√≠ch
local targetPosition = Vector3.new(-2597.051513671875, 32.039512634277344, -986.5516357421875)

-- D·ªãch chuy·ªÉn nh√¢n v·∫≠t ƒë·∫øn t·ªça ƒë·ªô
character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

Tab:CreateSection("Fishing")

local Button = Tab:CreateButton({
	Name = "Desert Fishing",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local targetPosition = Vector3.new(890.1141967773438, 9.118748664855957, -828.7176513671875)
    character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Magma Fishing",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- T·ªça ƒë·ªô ƒë√≠ch
local targetPosition = Vector3.new(3871.954833984375, 16.650545120239258, 572.737548828125)

-- D·ªãch chuy·ªÉn nh√¢n v·∫≠t ƒë·∫øn t·ªça ƒë·ªô
character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

local Button = Tab:CreateButton({
	Name = "Snow Fishing",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- T·ªça ƒë·ªô ƒë√≠ch
local targetPosition = Vector3.new(-3072.841064453125, 10.895713806152344, 300.09979248046875)

-- D·ªãch chuy·ªÉn nh√¢n v·∫≠t ƒë·∫øn t·ªça ƒë·ªô
character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
   -- The function that takes place when the button is pressed
         -- The function that takes place when the button is pressed
    	end
})

Tab:CreateSection("Boss Summon/Fight Room")

local Button = Tab:CreateButton({
	Name = "Cabybara Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(5432.73046875, 1755.6904296875, 610.4720458984375)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Maxwell Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-14569.0859375, 4700.61181640625, -3191.745361328125)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Dog Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(9000.396484375, 1750.1824951171875, -3042.721435546875)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Summon Lava Raid",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(3485.044677734375, 23.636802673339844, -1055.036865234375)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Praying",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-3513.5810546875, 400.43157958984375, -642.6527709960938)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Geto Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(5217.044921875, 2260.821533203125, -4130.38330078125)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Diavolo Summon",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(2238.60400390625, 20.818754196166992, 649.405029296875)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Mahito/Dagon Summon",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-2516.0263671875, 11.406415939331055, 123.847412109375)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Misaka Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-3605, 1250, 10453)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Dagon Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(1634, 22071, 59964)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Dagon Domain",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(27052.248046875, 24330.271484375, 44108.421875)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Mahito Fight Room",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-37975, 21990, 67347)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Button = Tab:CreateButton({
	Name = "Mahito Domain",
	Description = nil,
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local targetPosition = Vector3.new(-27548.91015625, 16200.41015625, 5832.3046875)
		character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
	end
})

local Tab = Window:CreateTab({
	Name = "Credits",
	Icon = "description",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Label = Tab:CreateLabel({
	Text = "script make by 54hz",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Label = Tab:CreateLabel({
	Text = "discord nhm_roblox,link https://discord.gg/pba3uuxeeg",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})
